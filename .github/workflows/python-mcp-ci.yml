name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - teardown

env:
  PROJECT_ID: sl-todoapi-python
  GKE_CLUSTER: todo-cluster
  REGION: us-central1
  REPOSITORY: todo-images
  IMAGE: todo-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Sealights Agent
      run: |
        pip install sealights-python-agent
    
    - name: Generate Session ID
      env:
        SL_TOKEN: ${{ secrets.SL_TOKEN }}
        SL_APP_NAME: ToDoAPI
        SL_BRANCH_NAME: main
        SL_BUILD_NAME: ${{ github.run_number }}
        SL_WORKSPACE_PATH: .
        SL_INCLUDE: "*.py"
        SL_EXCLUDE: "tests/*"
        SL_BUILDSESSIONID: todo-api-session-${{ github.run_number }}
      run: sl-python config
    
    - name: Scan Build
      env:
        SL_TOKEN: ${{ secrets.SL_TOKEN }}
        SL_BUILDSESSIONID: todo-api-session-${{ github.run_number }}
        SL_SCM: git
        SL_SCMPROVIDER: github
        SL_SCMBASEURL: https://github.com/${{ github.repository }}
      run: sl-python scan
    
    - name: Run Tests with Sealights
      env:
        SL_TOKEN: ${{ secrets.SL_TOKEN }}
        SL_BUILDSESSIONID: todo-api-session-${{ github.run_number }}
        SL_TEST_STAGE: "Unit Tests"
      run: |
        pip install -r requirements.txt
        pip install pytest
        sl-python pytest test_main.py --junitxml=test-results.xml
    
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Create Artifact Registry Repository
      run: |
        # Check if repository exists, if not create it
        if ! gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
          --location=${{ env.REGION }} --project=${{ env.PROJECT_ID }} > /dev/null 2>&1; then
          echo "Creating new Artifact Registry repository..."
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for Todo API"
        fi

    - name: Configure Docker
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Install GKE Auth Plugin
      run: |
        gcloud components install gke-gcloud-auth-plugin

    - name: Get GKE credentials
      run: |
        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.REGION }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ env.IMAGE_TAG }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ env.IMAGE_TAG }}
        docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:${{ env.IMAGE_TAG }} \
          ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}:latest

    - name: Update deployment file
      run: |
        # Replace environment variables in deployment.yaml
        envsubst < k8s/deployment.yaml > k8s/deployment_generated.yaml

    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/deployment_generated.yaml
        kubectl rollout status deployment/todo-app

    - name: Upload Test Results
      env:
        SL_TOKEN: ${{ secrets.SL_TOKEN }}
        SL_BUILDSESSIONID: todo-api-session-${{ github.run_number }}
      run: |
        sl-python uploadReports --source=test-results.xml --reportType=junit
      if: always()

    - name: Clean up old images
      run: |
        gcloud container images list-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }} \
          --format='get(digest)' --filter='NOT tags:latest' --limit=5 | \
        xargs -I {} gcloud container images delete "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}@{}" --quiet || true

  teardown:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'teardown'

    steps:
      - uses: actions/checkout@v3

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Install GKE Auth Plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.REGION }}

      - name: Delete Kubernetes resources
        run: |
          kubectl delete service todo-app-service --ignore-not-found
          kubectl delete deployment todo-app --ignore-not-found
          echo "Kubernetes resources deleted"

      - name: Delete Docker images
        run: |
          # Delete all images in the repository
          gcloud container images list-tags ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }} \
            --format='get(digest)' | \
          xargs -I {} gcloud container images delete "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE }}@{}" --quiet || true
          echo "Docker images cleaned up"

      - name: Delete Artifact Registry Repository (Optional)
        run: |
          # Uncomment the next line if you want to delete the entire repository
          # gcloud artifacts repositories delete ${{ env.REPOSITORY }} --location=${{ env.REGION }} --quiet
          echo "Repository cleanup skipped (uncomment to enable)"